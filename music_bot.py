import os
import tempfile
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Optional
import re

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import yt_dlp
import vk_api
from vk_api.audio import VkAudio
import yandex_music
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
VK_ACCESS_TOKEN = os.getenv("VK_ACCESS_TOKEN", "")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN", "")
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB Telegram limit
MAX_DURATION = 600  # 10 minutes max duration
TEMP_DIR = tempfile.gettempdir()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
TEXTS = {
    "welcome": """üéµ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!**

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üîç –ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é –º—É–∑—ã–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ üì± –†–∞–±–æ—Ç–∞—é —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ  
‚Ä¢ üéµ –†–∞–±–æ—Ç–∞—é —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ–∫–∏ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
2. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",

    "help": """üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üîç **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏** - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
üìÇ **–ü–ª–µ–π–ª–∏—Å—Ç—ã –í–ö** - –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
üìÇ **–ü–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å** - –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "Imagine Dragons Radioactive"
‚Ä¢ "The Beatles Hey Jude"  
‚Ä¢ "Eminem Lose Yourself"

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –í—ã –ø–∏—à–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç
2. –ë–æ—Ç –∏—â–µ—Ç –º—É–∑—ã–∫—É –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
3. –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –∞—É–¥–∏–æ—Ñ–∞–π–ª

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: MP3 192kbps
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: YouTube, –æ—Ç–∫—Ä—ã—Ç—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã

**–í–∞–∂–Ω–æ:** –ë–æ—Ç –ù–ï –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –í–ö/–Ø–Ω–¥–µ–∫—Å, –∞ –∏—â–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞""",

    "search_prompt": """üîç **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ Imagine Dragons Radioactive  
‚Ä¢ The Beatles - Hey Jude
‚Ä¢ Drake God's Plan
‚Ä¢ Billie Eilish bad guy

–Ø –Ω–∞–π–¥—É —Ç—Ä–µ–∫ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –∞—É–¥–∏–æ—Ñ–∞–π–ª.""",

    "searching": "üîç –ò—â—É: **{}**\n\n‚è≥ –ü–æ–∏—Å–∫ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö...",
    "downloading": "üì• –°–∫–∞—á–∏–≤–∞—é: **{}**\n\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...",
    "sending": "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: **{}**",
    "not_found": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: **{}**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
    "too_short": "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.",
    "too_long": "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.",
    "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",

    "vk_loading_playlists": "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...",
    "vk_no_playlists": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –í–ö.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π VK_ACCESS_TOKEN\n‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ",
    "vk_playlists_title": "üìÇ **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ** ({} —à—Ç.)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
    "vk_loading_tracks": "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: **{}**",
    "vk_no_tracks": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
    "vk_tracks_title": "üéµ **–ü–ª–µ–π–ª–∏—Å—Ç: {}** ({} —Ç—Ä–µ–∫–æ–≤)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å –≤—Å–µ':",

    "yandex_loading_playlists": "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏...",
    "yandex_no_playlists": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π YANDEX_TOKEN\n‚Ä¢ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫",
    "yandex_playlists_title": "üìÇ **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏** ({} —à—Ç.)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
    "yandex_loading_tracks": "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: **{}**",
    "yandex_no_tracks": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
    "yandex_tracks_title": "üéµ **–ü–ª–µ–π–ª–∏—Å—Ç: {}** ({} —Ç—Ä–µ–∫–æ–≤)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å –≤—Å–µ':",

    "downloading_playlist": "üì• **–°–∫–∞—á–∏–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç: {}**\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {} —Ç—Ä–µ–∫–æ–≤...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
    "playlist_progress": "üì• **–ü—Ä–æ–≥—Ä–µ—Å—Å: {}/{}**\n\nüéµ –°–∫–∞—á–∏–≤–∞—é: {}",
    "playlist_completed": "‚úÖ **–ü–ª–µ–π–ª–∏—Å—Ç —Å–∫–∞—á–∞–Ω!**\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {} —Ç—Ä–µ–∫–æ–≤\n‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {} —Ç—Ä–µ–∫–æ–≤",

    "service_not_configured": "‚ùå –°–µ—Ä–≤–∏—Å {} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.",
}

class MusicStates(StatesGroup):
    waiting_search_query = State()
    browsing_vk_playlists = State()
    browsing_vk_tracks = State()
    browsing_yandex_playlists = State()
    browsing_yandex_tracks = State()
    downloading_playlist = State()

class TechnicalMusicService:
    def __init__(self):
        self.vk_session = None
        self.vk_audio = None
        self.yandex_client = None
        self.init_services()

    def init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if VK_ACCESS_TOKEN:
            try:
                session = vk_api.VkApi(token=VK_ACCESS_TOKEN)
                self.vk_audio = VkAudio(session)
                self.vk_session = session
                logger.info("‚úÖ VK service initialized")
            except Exception as e:
                logger.error(f"‚ùå VK init error: {e}")

        if YANDEX_TOKEN:
            try:
                self.yandex_client = yandex_music.Client(YANDEX_TOKEN).init()
                logger.info("‚úÖ Yandex Music service initialized")
            except Exception as e:
                logger.error(f"‚ùå Yandex init error: {e}")

    async def get_vk_playlists(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏–∑ –í–ö"""
        if not self.vk_session:
            return []
        try:
            vk = self.vk_session.get_api()
            response = vk.audio.getPlaylists(owner_id=None)
            playlists = response.get('items', [])
            return [{"id": pl['id'], "title": pl['title'], "count": pl.get('count', 0)} for pl in playlists]
        except Exception as e:
            logger.error(f"VK playlists fetch error: {e}")
            return []

    async def get_vk_playlist_tracks(self, playlist_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –í–ö"""
        if not self.vk_session:
            return []
        try:
            vk = self.vk_session.get_api()
            response = vk.audio.get(owner_id=None, album_id=playlist_id)
            tracks = response.get('items', [])
            return [{
                'title': f"{audio['artist']} - {audio['title']}",
                'artist': audio['artist'],
                'track': audio['title'],
                'duration': audio.get('duration', 0),
                'source': 'vk'
            } for audio in tracks]
        except Exception as e:
            logger.error(f"VK playlist tracks fetch error: {e}")
            return []

    async def get_yandex_playlists(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
        if not self.yandex_client:
            return []
        try:
            playlists = self.yandex_client.users_playlists()
            return [{"id": pl.kind, "title": pl.title, "count": pl.track_count} for pl in playlists if pl.track_count > 0]
        except Exception as e:
            logger.error(f"Yandex playlists fetch error: {e}")
            return []

    async def get_yandex_playlist_tracks(self, playlist_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
        if not self.yandex_client:
            return []
        try:
            playlists = self.yandex_client.users_playlists()
            target_playlist = next((pl for pl in playlists if pl.kind == playlist_id), None)
            if not target_playlist:
                return []
            tracks = target_playlist.fetch_tracks()
            return [{
                'title': f"{', '.join(tr.artists_name())} - {tr.title}",
                'artist': ', '.join(tr.artists_name()),
                'track': tr.title,
                'duration': tr.duration_ms // 1000 if tr.duration_ms else 0,
                'source': 'yandex'
            } for tr in tracks]
        except Exception as e:
            logger.error(f"Yandex playlist tracks fetch error: {e}")
            return []

class MusicDownloader:
    @staticmethod
    async def download_track(query: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        try:
            output_path = os.path.join(TEMP_DIR, f"temp_{int(asyncio.get_event_loop().time())}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            ydl_opts = {
                'format': 'bestaudio[ext=m4a]/bestaudio/best',
                'outtmpl': f'{output_path}.%(ext)s',
                'quiet': True,
                'no_warnings': True,
                'extractaudio': True,
                'audioformat': 'mp3',
                'audioquality': '192',
                'prefer_ffmpeg': True,
                'keepvideo': False,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
            }

            # –ü–æ–∏—Å–∫ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö (YouTube –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
            search_query = f"ytsearch1:{query}"

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(search_query, download=False)

                if not info.get('entries'):
                    return None

                video_info = info['entries'][0]
                duration = video_info.get('duration', 0)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                if duration > MAX_DURATION:
                    logger.warning(f"Track too long: {duration}s > {MAX_DURATION}s")
                    return None

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                ydl.download([video_info['webpage_url']])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                mp3_file = f"{output_path}.mp3"
                if os.path.exists(mp3_file):
                    file_size = os.path.getsize(mp3_file)
                    if file_size <= MAX_FILE_SIZE:
                        return mp3_file
                    else:
                        os.remove(mp3_file)
                        logger.warning(f"File too large: {file_size} > {MAX_FILE_SIZE}")

                return None

        except Exception as e:
            logger.error(f"Error downloading {query}: {e}")
            return None

    @staticmethod
    def cleanup_file(file_path: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.debug(f"Cleaned up: {file_path}")
        except Exception as e:
            logger.error(f"Error deleting file {file_path}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
music_service = TechnicalMusicService()
downloader = MusicDownloader()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = []

    # –ü–æ–∏—Å–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    keyboard.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="search_music")])

    # –í–ö - –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if music_service.vk_audio:
        keyboard.append([InlineKeyboardButton(text="üìÇ –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö", callback_data="vk_playlists")])

    # –Ø–Ω–¥–µ–∫—Å - –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω  
    if music_service.yandex_client:
        keyboard.append([InlineKeyboardButton(text="üìÇ –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å", callback_data="yandex_playlists")])

    keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def paginated_keyboard(items: List[Dict], prefix: str, page: int = 0, per_page: int = 5, show_download_all: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    keyboard = []
    start = page * per_page
    end = min(start + per_page, len(items))

    # –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start, end):
        item = items[i]
        title = item['title'][:45] + "..." if len(item['title']) > 45 else item['title']
        keyboard.append([InlineKeyboardButton(text=f"üéµ {title}", callback_data=f"{prefix}_{i}_{page}")])

    # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å –≤—Å–µ" –¥–ª—è —Ç—Ä–µ–∫–æ–≤
    if show_download_all and items:
        keyboard.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏", callback_data=f"{prefix}_download_all_{page}")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_page_{page-1}"))
    if end < len(items):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{prefix}_page_{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_cmd(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await msg.answer(TEXTS["welcome"], reply_markup=main_menu(), parse_mode="Markdown")

@dp.message(Command("help"))  
async def help_cmd(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await msg.answer(TEXTS["help"], parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.message.edit_text(TEXTS["welcome"], reply_markup=main_menu(), parse_mode="Markdown")

@dp.callback_query(F.data == "help")
async def help_handler(query: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await query.message.edit_text(TEXTS["help"], reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(F.data == "search_music")
async def search_music_handler(query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
    await query.message.edit_text(TEXTS["search_prompt"], parse_mode="Markdown")
    await state.set_state(MusicStates.waiting_search_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö
@dp.callback_query(F.data == "vk_playlists")
async def vk_playlists_handler(query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö"""
    if not music_service.vk_audio:
        await query.answer(TEXTS["service_not_configured"].format("–í–ö–æ–Ω—Ç–∞–∫—Ç–µ"), show_alert=True)
        return

    status_msg = await query.message.edit_text(TEXTS["vk_loading_playlists"], parse_mode="Markdown")

    playlists = await music_service.get_vk_playlists()
    if not playlists:
        await status_msg.edit_text(TEXTS["vk_no_playlists"], parse_mode="Markdown")
        return

    await state.update_data(vk_playlists=playlists)
    await status_msg.edit_text(
        TEXTS["vk_playlists_title"].format(len(playlists)),
        reply_markup=paginated_keyboard(playlists, "vkpl"),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("vkpl_"))
async def vk_playlist_select_handler(query: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –í–ö"""
    parts = query.data.split("_")
    if len(parts) < 3:
        return

    idx = int(parts[1])
    page = int(parts[2])

    data = await state.get_data()
    playlists = data.get("vk_playlists", [])

    if idx >= len(playlists):
        await query.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    playlist = playlists[idx]
    status_msg = await query.message.edit_text(
        TEXTS["vk_loading_tracks"].format(playlist['title']), 
        parse_mode="Markdown"
    )

    tracks = await music_service.get_vk_playlist_tracks(playlist['id'])
    if not tracks:
        await status_msg.edit_text(TEXTS["vk_no_tracks"], parse_mode="Markdown")
        return

    await state.update_data(vk_tracks=tracks, current_playlist=playlist['title'])
    await status_msg.edit_text(
        TEXTS["vk_tracks_title"].format(playlist['title'], len(tracks)),
        reply_markup=paginated_keyboard(tracks, "vktr", 0, show_download_all=True),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å
@dp.callback_query(F.data == "yandex_playlists")
async def yandex_playlists_handler(query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
    if not music_service.yandex_client:
        await query.answer(TEXTS["service_not_configured"].format("–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞"), show_alert=True)
        return

    status_msg = await query.message.edit_text(TEXTS["yandex_loading_playlists"], parse_mode="Markdown")

    playlists = await music_service.get_yandex_playlists()
    if not playlists:
        await status_msg.edit_text(TEXTS["yandex_no_playlists"], parse_mode="Markdown")
        return

    await state.update_data(yandex_playlists=playlists)
    await status_msg.edit_text(
        TEXTS["yandex_playlists_title"].format(len(playlists)),
        reply_markup=paginated_keyboard(playlists, "ypl"),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("ypl_"))
async def yandex_playlist_select_handler(query: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ø–Ω–¥–µ–∫—Å"""
    parts = query.data.split("_")
    if len(parts) < 3:
        return

    idx = int(parts[1])
    page = int(parts[2])

    data = await state.get_data()
    playlists = data.get("yandex_playlists", [])

    if idx >= len(playlists):
        await query.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    playlist = playlists[idx]
    status_msg = await query.message.edit_text(
        TEXTS["yandex_loading_tracks"].format(playlist['title']), 
        parse_mode="Markdown"
    )

    tracks = await music_service.get_yandex_playlist_tracks(playlist['id'])
    if not tracks:
        await status_msg.edit_text(TEXTS["yandex_no_tracks"], parse_mode="Markdown")
        return

    await state.update_data(yandex_tracks=tracks, current_playlist=playlist['title'])
    await status_msg.edit_text(
        TEXTS["yandex_tracks_title"].format(playlist['title'], len(tracks)),
        reply_markup=paginated_keyboard(tracks, "ytr", 0, show_download_all=True),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
@dp.callback_query(F.data.startswith(("vktr_", "ytr_")))
async def track_download_handler(query: CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
    parts = query.data.split("_")
    if len(parts) < 3:
        return

    prefix = parts[0]  # vktr –∏–ª–∏ ytr
    idx = int(parts[1])
    page = int(parts[2])

    data = await state.get_data()
    tracks_key = f"{prefix.replace('tr', '')}_tracks"  # vk_tracks –∏–ª–∏ yandex_tracks
    tracks = data.get(tracks_key, [])

    if idx >= len(tracks):
        await query.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    track = tracks[idx]
    current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    status_msg = await query.message.edit_text(
        TEXTS["searching"].format(track['title']),
        parse_mode="Markdown"
    )

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
    file_path = await downloader.download_track(track['title'])

    if file_path:
        await status_msg.edit_text(TEXTS["sending"].format(track['title']), parse_mode="Markdown")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        try:
            with open(file_path, "rb") as audio_file:
                await query.message.answer_audio(
                    audio=audio_file,
                    caption=f"üéµ {track['title']}\nüìÇ –ü–ª–µ–π–ª–∏—Å—Ç: {current_playlist}\nüìç –ù–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö",
                    parse_mode="Markdown"
                )

            downloader.cleanup_file(file_path)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫–æ–≤
            await status_msg.edit_text(
                TEXTS[f"{prefix.replace('tr', '')}_tracks_title"].format(current_playlist, len(tracks)),
                reply_markup=paginated_keyboard(tracks, prefix, page, show_download_all=True),
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"Error sending audio: {e}")
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", parse_mode="Markdown")
    else:
        await status_msg.edit_text(TEXTS["not_found"].format(track['title']), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
@dp.callback_query(F.data.startswith(("vktr_download_all", "ytr_download_all")))
async def download_all_tracks_handler(query: CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    parts = query.data.split("_")
    prefix = parts[0]  # vktr –∏–ª–∏ ytr

    data = await state.get_data()
    tracks_key = f"{prefix.replace('tr', '')}_tracks"
    tracks = data.get(tracks_key, [])
    current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")

    if not tracks:
        await query.answer("‚ùå –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await query.message.edit_text(
        TEXTS["downloading_playlist"].format(current_playlist, len(tracks)),
        parse_mode="Markdown"
    )

    # –°—á–µ—Ç—á–∏–∫–∏
    downloaded_count = 0
    failed_count = 0

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i, track in enumerate(tracks):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_msg = TEXTS["playlist_progress"].format(i + 1, len(tracks), track['title'])
        await query.message.edit_text(progress_msg, parse_mode="Markdown")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        file_path = await downloader.download_track(track['title'])

        if file_path:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                with open(file_path, "rb") as audio_file:
                    await query.message.answer_audio(
                        audio=audio_file,
                        caption=f"üéµ {track['title']}\nüìÇ {current_playlist} ({i+1}/{len(tracks)})\nüìç –ù–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö",
                        parse_mode="Markdown"
                    )

                downloader.cleanup_file(file_path)
                downloaded_count += 1

            except Exception as e:
                logger.error(f"Error sending audio {track['title']}: {e}")
                failed_count += 1
        else:
            failed_count += 1

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
        await asyncio.sleep(1)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await query.message.edit_text(
        TEXTS["playlist_completed"].format(downloaded_count, failed_count),
        parse_mode="Markdown"
    )

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)
    await query.message.edit_text(TEXTS["welcome"], reply_markup=main_menu(), parse_mode="Markdown")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@dp.callback_query(F.data.startswith(("vkpl_page_", "vktr_page_", "ypl_page_", "ytr_page_")))
async def page_navigation_handler(query: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    parts = query.data.split("_")
    prefix = "_".join(parts[:-2])
    page = int(parts[-1])

    data = await state.get_data()

    if prefix == "vkpl":
        items = data.get("vk_playlists", [])
        text = TEXTS["vk_playlists_title"].format(len(items))
        show_download_all = False
    elif prefix == "vktr":
        items = data.get("vk_tracks", [])
        current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")
        text = TEXTS["vk_tracks_title"].format(current_playlist, len(items))
        show_download_all = True
    elif prefix == "ypl":
        items = data.get("yandex_playlists", [])
        text = TEXTS["yandex_playlists_title"].format(len(items))
        show_download_all = False
    elif prefix == "ytr":
        items = data.get("yandex_tracks", [])
        current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")
        text = TEXTS["yandex_tracks_title"].format(current_playlist, len(items))
        show_download_all = True
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return

    await query.message.edit_text(
        text,
        reply_markup=paginated_keyboard(items, prefix, page, show_download_all=show_download_all),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(MusicStates.waiting_search_query)
async def process_search_query(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = msg.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if len(query) < 2:
        await msg.answer(TEXTS["too_short"])
        return

    if len(query) > 100:
        await msg.answer(TEXTS["too_long"])
        return

    # –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    status_msg = await msg.answer(TEXTS["searching"].format(query), parse_mode="Markdown")

    try:
        file_path = await downloader.download_track(query)

        if file_path:
            await status_msg.edit_text(TEXTS["sending"].format(query), parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            with open(file_path, "rb") as audio_file:
                await msg.answer_audio(
                    audio=audio_file,
                    caption=f"üéµ {query}\nüìç –ù–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
                    parse_mode="Markdown"
                )

            downloader.cleanup_file(file_path)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await status_msg.delete()
            except:
                pass
        else:
            await status_msg.edit_text(TEXTS["not_found"].format(query), parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error processing search query '{query}': {e}")
        await status_msg.edit_text(TEXTS["error"], parse_mode="Markdown")

    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(1)
    await msg.answer(TEXTS["welcome"], reply_markup=main_menu(), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫)
@dp.message(F.text & ~F.text.startswith('/'))
async def direct_search_handler(message: Message):
    """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥"""
    query = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(query) < 2:
        await message.answer(TEXTS["too_short"])
        return

    if len(query) > 100:
        await message.answer(TEXTS["too_long"])
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    excluded = ['–ø—Ä–∏–≤–µ—Ç', 'hello', '–∫–∞–∫ –¥–µ–ª–∞', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∫–∞', 'hi', 'hey', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä']
    if any(word in query.lower() for word in excluded):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    status_msg = await message.answer(TEXTS["searching"].format(query), parse_mode="Markdown")

    try:
        file_path = await downloader.download_track(query)

        if file_path:
            await status_msg.edit_text(TEXTS["sending"].format(query), parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            with open(file_path, "rb") as audio_file:
                await message.answer_audio(
                    audio=audio_file,
                    caption=f"üéµ {query}\nüìç –ù–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
                    parse_mode="Markdown"
                )

            downloader.cleanup_file(file_path)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await status_msg.delete()
            except:
                pass
        else:
            await status_msg.edit_text(TEXTS["not_found"].format(query), parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in direct search '{query}': {e}")
        await status_msg.edit_text(TEXTS["error"], parse_mode="Markdown")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("üéµ Starting Music Telegram Bot...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN not found in environment variables!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(TEMP_DIR).mkdir(exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
        import shutil
        if not shutil.which('ffmpeg'):
            logger.warning("‚ö†Ô∏è FFmpeg not found! Audio conversion may not work properly.")
        else:
            logger.info("‚úÖ FFmpeg found")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_status = []
        if music_service.vk_audio:
            services_status.append("‚úÖ VK")
        if music_service.yandex_client:
            services_status.append("‚úÖ Yandex Music")

        if services_status:
            logger.info(f"üì± Available services: {', '.join(services_status)}")
        else:
            logger.info("üì± Only direct search available (no VK/Yandex tokens)")

        logger.info("üöÄ Bot started successfully!")
        await dp.start_polling(bot, skip_updates=True)

    except Exception as e:
        logger.error(f"‚ùå Bot startup error: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
