# –°–æ—Ö—Ä–∞–Ω–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
bot_code = '''import os
import tempfile
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import yt_dlp
import vk_api
from vk_api.audio import VkAudio
import yandex_music
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
VK_ACCESS_TOKEN = os.getenv("VK_ACCESS_TOKEN", "")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN", "")
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB Telegram limit
MAX_DURATION = 600  # 10 minutes max duration
TEMP_DIR = tempfile.gettempdir()

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class MusicStates(StatesGroup):
    browsing_vk_playlists = State()
    browsing_vk_tracks = State()
    browsing_yandex_playlists = State()
    browsing_yandex_tracks = State()
    waiting_search_query = State()

class TechnicalMusicService:
    def __init__(self):
        self.vk_session = None
        self.vk_audio = None
        self.yandex_client = None
        self.init_services()

    def init_services(self):
        if VK_ACCESS_TOKEN:
            try:
                session = vk_api.VkApi(token=VK_ACCESS_TOKEN)
                self.vk_audio = VkAudio(session)
                self.vk_session = session
                logger.info("‚úÖ VK service initialized")
            except Exception as e:
                logger.error(f"VK init error: {e}")

        if YANDEX_TOKEN:
            try:
                self.yandex_client = yandex_music.Client(YANDEX_TOKEN).init()
                logger.info("‚úÖ Yandex Music service initialized")
            except Exception as e:
                logger.error(f"Yandex init error: {e}")

    async def get_vk_playlists(self) -> List[Dict]:
        if not self.vk_session:
            return []
        try:
            vk = self.vk_session.get_api()
            response = vk.audio.getPlaylists(owner_id=None)
            playlists = response['items']
            return [{"id": pl['id'], "title": pl['title']} for pl in playlists]
        except Exception as e:
            logger.error(f"VK playlists fetch error: {e}")
            return []

    async def get_vk_playlist_tracks(self, playlist_id: int) -> List[Dict]:
        if not self.vk_session:
            return []
        try:
            vk = self.vk_session.get_api()
            response = vk.audio.get(owner_id=None, album_id=playlist_id)
            tracks = response['items']
            return [{
                'title': f"{audio['artist']} - {audio['title']}",
                'artist': audio['artist'],
                'track': audio['title'],
                'duration': audio.get('duration', 0),
                'source': 'vk'
            } for audio in tracks]
        except Exception as e:
            logger.error(f"VK playlist tracks fetch error: {e}")
            return []

    async def get_yandex_playlists(self) -> List[Dict]:
        if not self.yandex_client:
            return []
        try:
            playlists = self.yandex_client.users_playlists()
            return [{"id": pl.kind, "title": pl.title} for pl in playlists]
        except Exception as e:
            logger.error(f"Yandex playlists fetch error: {e}")
            return []

    async def get_yandex_playlist_tracks(self, playlist_id: str) -> List[Dict]:
        if not self.yandex_client:
            return []
        try:
            playlists = self.yandex_client.users_playlists()
            target_playlist = next((pl for pl in playlists if pl.kind == playlist_id), None)
            if not target_playlist:
                return []
            tracks = target_playlist.fetch_tracks()
            return [{
                'title': f"{', '.join(tr.artists_name())} - {tr.title}",
                'artist': ', '.join(tr.artists_name()),
                'track': tr.title,
                'duration': tr.duration_ms // 1000 if tr.duration_ms else 0,
                'source': 'yandex'
            } for tr in tracks]
        except Exception as e:
            logger.error(f"Yandex playlist tracks fetch error: {e}")
            return []

class MusicDownloader:
    @staticmethod
    async def download_track(query: str) -> Optional[str]:
        try:
            output_path = os.path.join(TEMP_DIR, f"temp_{int(asyncio.get_event_loop().time())}")
            ydl_opts = {
                'format': 'bestaudio[ext=m4a]/bestaudio/best',
                'outtmpl': f'{output_path}.%(ext)s',
                'quiet': True,
                'no_warnings': True,
                'extractaudio': True,
                'audioformat': 'mp3',
                'audioquality': '192',
                'prefer_ffmpeg': True,
                'keepvideo': False,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
            }
            search_query = f"ytsearch1:{query}"
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(search_query, download=False)
                if not info.get('entries'):
                    return None
                video_info = info['entries'][0]
                duration = video_info.get('duration', 0)
                if duration > MAX_DURATION:
                    return None
                ydl.download([video_info['webpage_url']])
                mp3_file = f"{output_path}.mp3"
                if os.path.exists(mp3_file):
                    file_size = os.path.getsize(mp3_file)
                    if file_size <= MAX_FILE_SIZE:
                        return mp3_file
                    else:
                        os.remove(mp3_file)
                return None
        except Exception as e:
            logger.error(f"Error downloading {query}: {e}")
            return None

    @staticmethod
    def cleanup_file(file_path: str):
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            logger.error(f"Error deleting file {file_path}: {e}")

music_service = TechnicalMusicService()
downloader = MusicDownloader()

# --- Keyboards ---
def main_menu():
    keyboard = []
    keyboard.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="search_music")])
    if music_service.vk_audio:
        keyboard.append([InlineKeyboardButton(text="üìÇ –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö", callback_data="vk_playlists")])
    if music_service.yandex_client:
        keyboard.append([InlineKeyboardButton(text="üìÇ –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å", callback_data="yandex_playlists")])
    keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def paginated_keyboard(items: List[Dict], prefix: str, page: int = 0, per_page=5):
    keyboard = []
    start = page * per_page
    end = min(start + per_page, len(items))
    for i in range(start, end):
        item = items[i]
        key = f"{prefix}_{i}_{page}"
        keyboard.append([InlineKeyboardButton(text=item['title'][:50], callback_data=key)])
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"{prefix}_page_{page-1}"))
    if end < len(items):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"{prefix}_page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- Handlers ---

@dp.message(Command("start"))
async def start_cmd(msg: Message):
    welcome_text = """üéµ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!**

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å YouTube
‚Ä¢ üìÇ –î–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –í–ö–æ–Ω—Ç–∞–∫—Ç–µ  
‚Ä¢ üìÇ –î–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
‚Ä¢ üéµ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3 (192kbps)
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    await msg.answer(welcome_text, reply_markup=main_menu(), parse_mode="Markdown")

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(query: CallbackQuery):
    await query.message.edit_text("üéµ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                  reply_markup=main_menu(), parse_mode="Markdown")

@dp.callback_query(F.data == "search_music")
async def search_music_handler(query: CallbackQuery, state: FSMContext):
    search_text = """üîç **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ Imagine Dragons Radioactive
‚Ä¢ The Beatles Hey Jude  
‚Ä¢ Eminem Lose Yourself

–ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Ç—Ä–µ–∫ –Ω–∞ YouTube –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª."""
    await query.message.edit_text(search_text, parse_mode="Markdown")
    await state.set_state(MusicStates.waiting_search_query)

@dp.message(MusicStates.waiting_search_query)
async def process_search_query(msg: Message, state: FSMContext):
    query = msg.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    if len(query) < 2:
        await msg.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    status_msg = await msg.answer(f"üîç –ò—â—É: **{query}**\\n\\n‚è≥ –°–∫–∞—á–∏–≤–∞—é —Å YouTube...", 
                                  parse_mode="Markdown")
    
    file_path = await downloader.download_track(query)
    if file_path:
        await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: **{query}**", parse_mode="Markdown")
        
        with open(file_path, "rb") as audio_file:
            await msg.answer_audio(
                audio=audio_file,
                caption=f"üéµ {query}\\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: YouTube",
                parse_mode="Markdown"
            )
        downloader.cleanup_file(file_path)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            await status_msg.delete()
        except:
            pass
    else:
        await status_msg.edit_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: **{query}**\\n\\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", 
                                   parse_mode="Markdown")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(1)
    await msg.answer("üéµ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", reply_markup=main_menu(), parse_mode="Markdown")

@dp.callback_query(F.data == "vk_playlists")
async def vk_playlists_handler(query: CallbackQuery, state: FSMContext):
    if not music_service.vk_audio:
        await query.answer("‚ùå –í–ö —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
        
    status_msg = await query.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö...")
    
    playlists = await music_service.get_vk_playlists()
    if not playlists:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö")
        return
        
    await state.update_data(vk_playlists=playlists)
    
    playlist_text = f"üìÇ **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö** ({len(playlists)} —à—Ç.)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç:"
    await status_msg.edit_text(playlist_text, 
                               reply_markup=paginated_keyboard(playlists, "vkpl"),
                               parse_mode="Markdown")

@dp.callback_query(F.data.startswith("vkpl_"))
async def vk_playlist_select_handler(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data.get("vk_playlists", [])
    parts = query.data.split("_")
    idx = int(parts[1])
    page = int(parts[2])
    
    if idx >= len(playlists):
        await query.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    playlist = playlists[idx]
    
    status_msg = await query.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫–∏ –∏–∑: **{playlist['title']}**", 
                                               parse_mode="Markdown")
    
    tracks = await music_service.get_vk_playlist_tracks(playlist['id'])
    if not tracks:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
        return
        
    await state.update_data(vk_tracks=tracks, current_playlist=playlist['title'])
    
    tracks_text = f"üéµ **{playlist['title']}** ({len(tracks)} —Ç—Ä–µ–∫–æ–≤)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    await status_msg.edit_text(tracks_text, 
                               reply_markup=paginated_keyboard(tracks, "vktr", 0),
                               parse_mode="Markdown")

@dp.callback_query(F.data.startswith("vktr_"))
async def vk_track_select_handler(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tracks = data.get("vk_tracks", [])
    current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")
    parts = query.data.split("_")
    idx = int(parts[1])
    page = int(parts[2])
    
    if idx >= len(tracks):
        await query.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    track = tracks[idx]
    
    status_msg = await query.message.edit_text(
        f"üîÑ –°–∫–∞—á–∏–≤–∞—é: **{track['title']}**\\n\\n‚è≥ –ü–æ–∏—Å–∫ –Ω–∞ YouTube...",
        parse_mode="Markdown"
    )
    
    file_path = await downloader.download_track(track['title'])
    if file_path:
        await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: **{track['title']}**", parse_mode="Markdown")
        
        with open(file_path, "rb") as audio_file:
            await query.message.answer_audio(
                audio=audio_file,
                caption=f"üéµ {track['title']}\\nüìÇ –ü–ª–µ–π–ª–∏—Å—Ç: {current_playlist}\\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: –í–ö ‚Üí YouTube",
                parse_mode="Markdown"
            )
        downloader.cleanup_file(file_path)
    else:
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫–æ–≤
    tracks_text = f"üéµ **{current_playlist}** ({len(tracks)} —Ç—Ä–µ–∫–æ–≤)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:"
    await status_msg.edit_text(tracks_text, 
                               reply_markup=paginated_keyboard(tracks, "vktr", page),
                               parse_mode="Markdown")

@dp.callback_query(F.data == "yandex_playlists")
async def yandex_playlists_handler(query: CallbackQuery, state: FSMContext):
    if not music_service.yandex_client:
        await query.answer("‚ùå –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
        
    status_msg = await query.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏...")
    
    playlists = await music_service.get_yandex_playlists()
    if not playlists:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏")
        return
        
    await state.update_data(yandex_playlists=playlists)
    
    playlist_text = f"üìÇ **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏** ({len(playlists)} —à—Ç.)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç:"
    await status_msg.edit_text(playlist_text, 
                               reply_markup=paginated_keyboard(playlists, "ypl"),
                               parse_mode="Markdown")

@dp.callback_query(F.data.startswith("ypl_"))
async def yandex_playlist_select_handler(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data.get("yandex_playlists", [])
    parts = query.data.split("_")
    idx = int(parts[1])
    page = int(parts[2])
    
    if idx >= len(playlists):
        await query.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    playlist = playlists[idx]
    
    status_msg = await query.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫–∏ –∏–∑: **{playlist['title']}**", 
                                               parse_mode="Markdown")
    
    tracks = await music_service.get_yandex_playlist_tracks(playlist['id'])
    if not tracks:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
        return
        
    await state.update_data(yandex_tracks=tracks, current_playlist=playlist['title'])
    
    tracks_text = f"üéµ **{playlist['title']}** ({len(tracks)} —Ç—Ä–µ–∫–æ–≤)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    await status_msg.edit_text(tracks_text, 
                               reply_markup=paginated_keyboard(tracks, "ytr", 0),
                               parse_mode="Markdown")

@dp.callback_query(F.data.startswith("ytr_"))
async def yandex_track_select_handler(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tracks = data.get("yandex_tracks", [])
    current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")
    parts = query.data.split("_")
    idx = int(parts[1])
    page = int(parts[2])
    
    if idx >= len(tracks):
        await query.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    track = tracks[idx]
    
    status_msg = await query.message.edit_text(
        f"üîÑ –°–∫–∞—á–∏–≤–∞—é: **{track['title']}**\\n\\n‚è≥ –ü–æ–∏—Å–∫ –Ω–∞ YouTube...",
        parse_mode="Markdown"
    )
    
    file_path = await downloader.download_track(track['title'])
    if file_path:
        await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: **{track['title']}**", parse_mode="Markdown")
        
        with open(file_path, "rb") as audio_file:
            await query.message.answer_audio(
                audio=audio_file,
                caption=f"üéµ {track['title']}\\nüìÇ –ü–ª–µ–π–ª–∏—Å—Ç: {current_playlist}\\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: –Ø–Ω–¥–µ–∫—Å ‚Üí YouTube",
                parse_mode="Markdown"
            )
        downloader.cleanup_file(file_path)
    else:
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫–æ–≤
    tracks_text = f"üéµ **{current_playlist}** ({len(tracks)} —Ç—Ä–µ–∫–æ–≤)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:"
    await status_msg.edit_text(tracks_text, 
                               reply_markup=paginated_keyboard(tracks, "ytr", page),
                               parse_mode="Markdown")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@dp.callback_query(F.data.startswith(("vkpl_page_", "vktr_page_", "ypl_page_", "ytr_page_")))
async def page_navigation_handler(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    parts = query.data.split("_")
    prefix = "_".join(parts[:-2])  # vkpl, vktr, ypl, ytr
    page = int(parts[-1])
    
    if prefix == "vkpl":
        items = data.get("vk_playlists", [])
        text = f"üìÇ **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –í–ö** ({len(items)} —à—Ç.)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç:"
    elif prefix == "vktr":
        items = data.get("vk_tracks", [])
        current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")
        text = f"üéµ **{current_playlist}** ({len(items)} —Ç—Ä–µ–∫–æ–≤)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    elif prefix == "ypl":
        items = data.get("yandex_playlists", [])
        text = f"üìÇ **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏** ({len(items)} —à—Ç.)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç:"
    elif prefix == "ytr":
        items = data.get("yandex_tracks", [])
        current_playlist = data.get("current_playlist", "–ø–ª–µ–π–ª–∏—Å—Ç")
        text = f"üéµ **{current_playlist}** ({len(items)} —Ç—Ä–µ–∫–æ–≤)\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return
    
    await query.message.edit_text(text, 
                                  reply_markup=paginated_keyboard(items, prefix, page),
                                  parse_mode="Markdown")

@dp.callback_query(F.data == "help")
async def help_handler(query: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    services_status = []
    if music_service.vk_audio:
        services_status.append("‚úÖ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
    else:
        services_status.append("‚ùå –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
        
    if music_service.yandex_client:
        services_status.append("‚úÖ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞")  
    else:
        services_status.append("‚ùå –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
    
    help_text = f"""üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º—É –±–æ—Ç—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
{chr(10).join(services_status)}

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üîç **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏** - –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Ç—Ä–µ–∫ –Ω–∞ YouTube
üìÇ **–ü–ª–µ–π–ª–∏—Å—Ç—ã –í–ö** - –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
üìÇ **–ü–ª–µ–π–ª–∏—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å** - –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ "üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏" –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Imagine Dragons Radioactive")
3. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –í–ö/–Ø–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–∫–æ–≤

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: MP3 192kbps
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏: YouTube

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –í–ö –∏ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.message.edit_text(help_text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message(F.text & ~F.text.startswith('/'))
async def direct_search_handler(message: Message):
    query = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    if len(query) < 2:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞.", 
                           reply_markup=main_menu())
        return
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    excluded = ['–ø—Ä–∏–≤–µ—Ç', 'hello', '–∫–∞–∫ –¥–µ–ª–∞', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∫–∞', 'hi', 'hey']
    if any(word in query.lower() for word in excluded):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏.", 
                           reply_markup=main_menu())
        return
    
    status_msg = await message.answer(f"üîç –ò—â—É: **{query}**\\n\\n‚è≥ –°–∫–∞—á–∏–≤–∞—é —Å YouTube...", 
                                      parse_mode="Markdown")
    
    try:
        file_path = await downloader.download_track(query)
        if file_path:
            await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: **{query}**", parse_mode="Markdown")
            
            with open(file_path, "rb") as audio_file:
                await message.answer_audio(
                    audio=audio_file,
                    caption=f"üéµ {query}\\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: YouTube",
                    parse_mode="Markdown"
                )
            downloader.cleanup_file(file_path)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            try:
                await status_msg.delete()
            except:
                pass
        else:
            await status_msg.edit_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: **{query}**\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", 
                                       parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"Error in direct search {query}: {e}")
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

async def main():
    try:
        logger.info("üéµ Starting Music Telegram Bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN not found in environment variables!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        Path(TEMP_DIR).mkdir(exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
        import shutil
        if not shutil.which('ffmpeg'):
            logger.warning("‚ö†Ô∏è FFmpeg not found! Audio conversion may not work properly.")
        else:
            logger.info("‚úÖ FFmpeg found")
        
        logger.info("üöÄ Bot started successfully!")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå Bot startup error: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
with open('music_bot.py', 'w', encoding='utf-8') as f:
    f.write(bot_code)

print("‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª music_bot.py")
print("\nüéâ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê –ì–û–¢–û–í–ê!")
print("\nüìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:")
print("‚îú‚îÄ‚îÄ music_bot.py              # üêç –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞")
print("‚îú‚îÄ‚îÄ requirements.txt          # üì¶ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏") 
print("‚îú‚îÄ‚îÄ .env.example             # ‚öôÔ∏è –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
print("‚îú‚îÄ‚îÄ .gitignore               # üö´ Git –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
print("‚îú‚îÄ‚îÄ README.md                # üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
print("‚îú‚îÄ‚îÄ Dockerfile               # üê≥ Docker –æ–±—Ä–∞–∑")
print("‚îú‚îÄ‚îÄ docker-compose.yml       # üê≥ Docker Compose")
print("‚îú‚îÄ‚îÄ railway.json             # üöÇ Railway –¥–µ–ø–ª–æ–π")
print("‚îú‚îÄ‚îÄ Procfile                 # üì¶ Heroku –¥–µ–ø–ª–æ–π")
print("‚îî‚îÄ‚îÄ .github/workflows/       # üîÑ CI/CD")
print("    ‚îî‚îÄ‚îÄ deploy.yml")

print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
print("1. üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env.example ‚Üí .env")
print("2. üîë –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ:")
print("   - BOT_TOKEN (–æ—Ç @BotFather)")
print("   - VK_ACCESS_TOKEN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
print("   - YANDEX_TOKEN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
print("3. üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
print("4. ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ: python music_bot.py")
print("5. üåê –î–ª—è –¥–µ–ø–ª–æ—è: push –≤ GitHub ‚Üí Railway –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π")

print("\nüí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ë–û–¢–ê:")
print("‚úÖ –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å YouTube")
print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –í–ö–æ–Ω—Ç–∞–∫—Ç–µ") 
print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏")
print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π")
print("‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3 (192kbps)")
print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã")
print("‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")